import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Ciswap } from "../target/types/ciswap"; // T·ª± ƒë·ªông sinh ra t·ª´ IDL
import { assert } from "chai";

describe("ciswap", () => {
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);

  const program = anchor.workspace.ciswap as Program<Ciswap>;
  const signer = provider.wallet.publicKey;

  it("Calls hello_anchor instruction", async () => {
    // Derive PDA: [b"greeting", signer]
    const [helloPDA] = await anchor.web3.PublicKey.findProgramAddress(
      [Buffer.from("ciswap"), signer.toBuffer()],
      program.programId
    );

    const msg = "Xin ch√†o t·ª´ Th·∫ßy!";

    // Call instruction
    const tx = await program.methods
      .helloAnchor(msg)
      .accounts({
        signer,
      })
      .rpc();

    console.log("‚úÖ G·ª≠i hello_anchor th√†nh c√¥ng:", tx);

    // Fetch l·∫°i account ƒë·ªÉ ƒë·ªçc data (n·∫øu struct c√≥ msg)
    const helloAccount = await program.account.helloAnchor.fetch(helloPDA);
    console.log("üì¶ D·ªØ li·ªáu hello_anchor account:", helloAccount);

    // N·∫øu struct c√≥ field `msg`, test lu√¥n:
    assert.equal(helloAccount.message, msg);
  });
});
